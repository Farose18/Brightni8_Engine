[
    {
        "id": "d918a03feb7c460b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6fb066b12b6b7f81",
        "type": "tab",
        "label": "B01-B14 Inverters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "456d66e8cb220ab1",
        "type": "tab",
        "label": "NR-PPC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "59d31c1344b2ca00",
        "type": "tab",
        "label": "NR-INFLUX",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "72e948af20dbdb5c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c984841d8680d12f",
        "type": "amqp-broker",
        "name": "",
        "host": "192.168.85.84",
        "port": "5673",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "84693b13af93d1a3",
        "type": "amqp-broker",
        "name": "",
        "host": "192.168.85.84",
        "port": "5673",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "61fe6336ac88341b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.85.84",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8799a6c432b5666e",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.85.52",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5f9bb787aa64ad10",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.85.84",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "33f460a4c4855dbc",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "584fca81fb635aee",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.1.2",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "da9b4d959dd518ce",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.1.3",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f80b0b680ce44845",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.90.84",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "573f3a2467495d59",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "144c9a46c484af92",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.183",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e3ec7fa306492b73",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.20",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5dc8a14ff8f6763b",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.179",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fda74861480ac1a8",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.65",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b6a082214c137222",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.180",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "255d4c3bde7b2140",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.21",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b232fa0cfc9677d7",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.181",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4b9685e9f3a248b9",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.22",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "83aabc78944bbcaf",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.23",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "efbac30b7bab8787",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.182",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "522b0bf2fc4d29ac",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.183",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fbf11ecea941c15f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.24",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9d2e684ef218b852",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.25",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "db7526e5d0819810",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.184",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "764195a0dad3e0a4",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.26",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f4a0e4c5bb4a243c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.27",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e13be85ac06b0e41",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.28",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9721e62d3bb84d45",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b48b91cd51c81c61",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.32",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fa814ef12fca18c0",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.41",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9f8434df27e2794b",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.42",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ca05c80f9714241f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.61",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1761bc700846057e",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.62",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9f775bc2e7a537e4",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.71",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "657ec53fe924269d",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.72",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9fd17696c065cb09",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.91",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ee2e00fd11903084",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.92",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e24272956cbe2899",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6c8882a38a893036",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.102",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fc1202d167531985",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.121",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8ba5853b0fc06506",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.122",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "08574dc820e03fe2",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.131",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8c2b155cf8f52f6e",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.132",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "103d7b6d0f7c2a8e",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.151",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b52c03c55dd36572",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.152",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1fdffee8602349fa",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.161",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f44242fe8e2ee254",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.162",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ef8858d66ce4c588",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.181",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "24f55e670b1df3b8",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.182",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "24a2b99eec1df0f0",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.191",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "57a70b9c54524b50",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.192",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ec4c619e3ce7c73a",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.211",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4e9709b0213bfa39",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.212",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "249803a1d1dbd897",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.221",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9d6c57e86b59264d",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.222",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "17ac3958eae153d0",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.90.84:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "882dd3d5780178cb",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.77.41",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "710f0a6112469216",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.0.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7ee444d2209a34f1",
        "type": "influxdb",
        "hostname": "192.168.0.127",
        "port": "8086",
        "protocol": "http",
        "database": "iSolar",
        "name": "influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3d1d86526ac7fc0f",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.0.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "897670cad522e6c5",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.77.41",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a4c6ad7350db8a08",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "cb28b6a8613e3274",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.41",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d2ce8173bc21a30b",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.61",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4c429685fb621de8",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.71",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "20def9535a2f9dec",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.91",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "736a748bbe13a0b4",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "908c6b8311030fa6",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.121",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fc668b70d6544f02",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.32",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bb1ab0ed45dbe6c2",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.42",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "884e8d37177f8a0a",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.62",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "557ae0c4ab283ab0",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.72",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "116fc13a5f58b5de",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.92",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "63b83dc4daeeda28",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.102",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "92e62442e2403691",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.131",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b2020f0ea79f9a33",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.132",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "201e4c2baf69ebe4",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.133",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "2a19bdca9a578555",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.134",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "085a3d4e42c1982f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.133",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1cb19cba1bf297cc",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.134",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "dce7dc56940105ab",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,1000,U32,3,1,2,3000,U32,B01,B01_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW,0.1\n2,1002,S32,3,1,2,3002,S32,B01,B01_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr,0.1\n3,1004,S32,3,1,2,3004,S32,B01,B01_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,Brightnight,,,,0.001\n4,2102,S32,3,1,2,3012,S32,B01,B01_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,,0.1\n5,2104,S32,3,1,2,3014,S32,B01,B01_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,,0.001\n6,2100,U32,3,1,2,3010,U32,B01,B01_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,,0.1\n",
        "output": "str",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "19bb7b024a5f9041"
            ]
        ]
    },
    {
        "id": "19bb7b024a5f9041",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "8f7dab439f5cd319"
            ]
        ]
    },
    {
        "id": "8f7dab439f5cd319",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "309da2c7a3cacfd1"
            ]
        ]
    },
    {
        "id": "5110714d636710d8",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 01 - SACU 01",
        "info": "",
        "x": 130,
        "y": 280,
        "wires": []
    },
    {
        "id": "4459543a4a11c280",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "dce7dc56940105ab"
            ]
        ]
    },
    {
        "id": "ac1936335c3e278b",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "9721e62d3bb84d45",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 880,
        "y": 400,
        "wires": [
            [],
            [
                "0629c3a8a042d8a6"
            ]
        ]
    },
    {
        "id": "0629c3a8a042d8a6",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 1998",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "21ba6c7609f834e3",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "4b3458aeb0144cf0"
            ]
        ]
    },
    {
        "id": "d007ab7275ccb26a",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "d6e5575999473ca2"
            ]
        ]
    },
    {
        "id": "d6e5575999473ca2",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B01,B01_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B01,B01_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B01,B01_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "21ba6c7609f834e3"
            ]
        ]
    },
    {
        "id": "eeb02ad8531f13a0",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B01,B01_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B01,B01_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B01,B01_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B01,B01_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B01,B01_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B01,B01_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 820,
        "wires": [
            [
                "f91ff0f42f1c4f8e"
            ]
        ]
    },
    {
        "id": "f91ff0f42f1c4f8e",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 820,
        "wires": [
            [
                "8c8bec77e1f3fd53"
            ]
        ]
    },
    {
        "id": "cbee57507385ad9a",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "eeb02ad8531f13a0"
            ]
        ]
    },
    {
        "id": "aaa0f12698a444a6",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "fa814ef12fca18c0",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 890,
        "y": 900,
        "wires": [
            [],
            [
                "5d70b069f80e1023"
            ]
        ]
    },
    {
        "id": "5d70b069f80e1023",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2428",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 900,
        "wires": []
    },
    {
        "id": "eb93034cd394ba25",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.04\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 900,
        "wires": [
            [
                "be7294e49186969b"
            ]
        ]
    },
    {
        "id": "3f3f2aa701782d9a",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 900,
        "wires": [
            [
                "eb93034cd394ba25"
            ]
        ]
    },
    {
        "id": "dbab9f1ef1429453",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "1d0c47966c79b34c"
            ]
        ]
    },
    {
        "id": "be7294e49186969b",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 237",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 900,
        "wires": [
            [
                "aaa0f12698a444a6"
            ]
        ]
    },
    {
        "id": "1d0c47966c79b34c",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B01,B01_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B01,B01_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B01,B01_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 270,
        "y": 900,
        "wires": [
            [
                "3f3f2aa701782d9a"
            ]
        ]
    },
    {
        "id": "96265b1f4c3feb2d",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B02,B02_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B02,B02_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B02,B02_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B02,B02_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B02,B02_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B02,B02_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "f2617fbd2d8e4ea4"
            ]
        ]
    },
    {
        "id": "f2617fbd2d8e4ea4",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "d1269ddb9347c0d1"
            ]
        ]
    },
    {
        "id": "147755d9f2bd0013",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "96265b1f4c3feb2d"
            ]
        ]
    },
    {
        "id": "b68fe085a99bdeb5",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "ca05c80f9714241f",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 900,
        "y": 1400,
        "wires": [
            [],
            [
                "b62d44a82822fed4"
            ]
        ]
    },
    {
        "id": "b62d44a82822fed4",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2444",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1400,
        "wires": []
    },
    {
        "id": "343ef1090dc00bc0",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1400,
        "wires": [
            [
                "0e4c3dcbf667ef4d"
            ]
        ]
    },
    {
        "id": "4666e0216d21a4b0",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 1400,
        "wires": [
            [
                "343ef1090dc00bc0"
            ]
        ]
    },
    {
        "id": "5c07e8edef31d7ff",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "479a1184a4e78aa0"
            ]
        ]
    },
    {
        "id": "0e4c3dcbf667ef4d",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 239",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "b68fe085a99bdeb5"
            ]
        ]
    },
    {
        "id": "479a1184a4e78aa0",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B02,B02_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B02,B02_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B02,B02_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 270,
        "y": 1400,
        "wires": [
            [
                "4666e0216d21a4b0"
            ]
        ]
    },
    {
        "id": "c3d68e45a80c5cee",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B03,B03_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B03,B03_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B03,B03_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B03,B03_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B03,B03_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B03,B03_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 1800,
        "wires": [
            [
                "abe1f6b1b81b4020"
            ]
        ]
    },
    {
        "id": "abe1f6b1b81b4020",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 1800,
        "wires": [
            [
                "f2302a81bae6aad6"
            ]
        ]
    },
    {
        "id": "bb8feaa115b89327",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 1800,
        "wires": [
            [
                "c3d68e45a80c5cee"
            ]
        ]
    },
    {
        "id": "c3ed913d829c49b9",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "9f775bc2e7a537e4",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 890,
        "y": 1880,
        "wires": [
            [],
            [
                "a355d6ab94d5dd39"
            ]
        ]
    },
    {
        "id": "a355d6ab94d5dd39",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2460",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1880,
        "wires": []
    },
    {
        "id": "aceb7212a54645d3",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1880,
        "wires": [
            [
                "d1c0aef9a6965247"
            ]
        ]
    },
    {
        "id": "2ad28c122bb2184a",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 1880,
        "wires": [
            [
                "aceb7212a54645d3"
            ]
        ]
    },
    {
        "id": "83dd22f5d791cea7",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "7a076e2c2850e2bb"
            ]
        ]
    },
    {
        "id": "d1c0aef9a6965247",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 241",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1880,
        "wires": [
            [
                "c3ed913d829c49b9"
            ]
        ]
    },
    {
        "id": "7a076e2c2850e2bb",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B03,B03_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B03,B03_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B03,B03_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 270,
        "y": 1880,
        "wires": [
            [
                "2ad28c122bb2184a"
            ]
        ]
    },
    {
        "id": "f0b0065117791c1e",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B03,B03_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B03,B03_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B03,B03_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B03,B03_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B03,B03_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B03,B03_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 2300,
        "wires": [
            [
                "45cf4b378a3e042a"
            ]
        ]
    },
    {
        "id": "45cf4b378a3e042a",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 2300,
        "wires": [
            [
                "1f2bfc0e642ac786"
            ]
        ]
    },
    {
        "id": "df3e0e6e855ebdb1",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2300,
        "wires": [
            [
                "f0b0065117791c1e"
            ]
        ]
    },
    {
        "id": "5d6c390f0de09cdd",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "9fd17696c065cb09",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 880,
        "y": 2380,
        "wires": [
            [],
            [
                "588386c9796c5cec"
            ]
        ]
    },
    {
        "id": "588386c9796c5cec",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2476",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 2380,
        "wires": []
    },
    {
        "id": "bd0633b9dd9b5767",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.06\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2380,
        "wires": [
            [
                "1891618d44689e46"
            ]
        ]
    },
    {
        "id": "135f9a789a791acd",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 2380,
        "wires": [
            [
                "bd0633b9dd9b5767"
            ]
        ]
    },
    {
        "id": "bb2aa0fe92ce785a",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2380,
        "wires": [
            [
                "63c3ddac15e9c126"
            ]
        ]
    },
    {
        "id": "1891618d44689e46",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 243",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2380,
        "wires": [
            [
                "5d6c390f0de09cdd"
            ]
        ]
    },
    {
        "id": "63c3ddac15e9c126",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B03,B03_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B03,B03_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B03,B03_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 260,
        "y": 2380,
        "wires": [
            [
                "135f9a789a791acd"
            ]
        ]
    },
    {
        "id": "108295284d2b05bd",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B04,B04_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B04,B04_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B04,B04_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B04,B04_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B04,B04_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B04,B04_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 2800,
        "wires": [
            [
                "c11adfd0a8029ded"
            ]
        ]
    },
    {
        "id": "c11adfd0a8029ded",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 2800,
        "wires": [
            [
                "f2390794f03f912b"
            ]
        ]
    },
    {
        "id": "d810cc0ba8b3ad5f",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2800,
        "wires": [
            [
                "108295284d2b05bd"
            ]
        ]
    },
    {
        "id": "e49790c60dc01ac9",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "e24272956cbe2899",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 890,
        "y": 2880,
        "wires": [
            [],
            [
                "939746a1b924f5c9"
            ]
        ]
    },
    {
        "id": "939746a1b924f5c9",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2493",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 2880,
        "wires": []
    },
    {
        "id": "81ee2285b0e42bf1",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.04\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2880,
        "wires": [
            [
                "ca31f86e0bc422df"
            ]
        ]
    },
    {
        "id": "1f2f5b3cd946645e",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 2880,
        "wires": [
            [
                "81ee2285b0e42bf1"
            ]
        ]
    },
    {
        "id": "eea328233469e623",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 140,
        "y": 2880,
        "wires": [
            [
                "177136455b39e8e2"
            ]
        ]
    },
    {
        "id": "ca31f86e0bc422df",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 245",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2880,
        "wires": [
            [
                "e49790c60dc01ac9"
            ]
        ]
    },
    {
        "id": "177136455b39e8e2",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B04,B04_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B04,B04_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B04,B04_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 270,
        "y": 2880,
        "wires": [
            [
                "1f2f5b3cd946645e"
            ]
        ]
    },
    {
        "id": "ab5314655dc40949",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B05,B05_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B05,B05_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B05,B05_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B05,B05_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B05,B05_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B05,B05_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 320,
        "y": 3280,
        "wires": [
            [
                "ee8fe0c1b7a4c133"
            ]
        ]
    },
    {
        "id": "ee8fe0c1b7a4c133",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 3280,
        "wires": [
            [
                "d8f975c892993728"
            ]
        ]
    },
    {
        "id": "60e7601135073497",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 170,
        "y": 3280,
        "wires": [
            [
                "ab5314655dc40949"
            ]
        ]
    },
    {
        "id": "f8b4a5d522e6439e",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "fc1202d167531985",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 920,
        "y": 3360,
        "wires": [
            [],
            [
                "c0f0ca149db77667"
            ]
        ]
    },
    {
        "id": "c0f0ca149db77667",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2509",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 3360,
        "wires": []
    },
    {
        "id": "0b64ce283632c73e",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3360,
        "wires": [
            [
                "a20dec6b1b8ee94d"
            ]
        ]
    },
    {
        "id": "cc310d10e92bb547",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 430,
        "y": 3360,
        "wires": [
            [
                "0b64ce283632c73e"
            ]
        ]
    },
    {
        "id": "96a6233acf815ddb",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 170,
        "y": 3360,
        "wires": [
            [
                "195197cac14eb19c"
            ]
        ]
    },
    {
        "id": "a20dec6b1b8ee94d",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 247",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3360,
        "wires": [
            [
                "f8b4a5d522e6439e"
            ]
        ]
    },
    {
        "id": "195197cac14eb19c",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B05,B05_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B05,B05_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B05,B05_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 300,
        "y": 3360,
        "wires": [
            [
                "cc310d10e92bb547"
            ]
        ]
    },
    {
        "id": "b6accd1dc8eb3cf7",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 01 - SACU 03",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "e0356286ecf083a9",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 03 - SACU 01",
        "info": "",
        "x": 150,
        "y": 1740,
        "wires": []
    },
    {
        "id": "36cbed625523dca4",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 03 - SACU 03",
        "info": "",
        "x": 150,
        "y": 2240,
        "wires": []
    },
    {
        "id": "6da90f396567bfa2",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 04 - SACU 02",
        "info": "",
        "x": 150,
        "y": 2720,
        "wires": []
    },
    {
        "id": "c571c0fc63495d8e",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 05 - SACU 02",
        "info": "",
        "x": 190,
        "y": 3220,
        "wires": []
    },
    {
        "id": "309da2c7a3cacfd1",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "a4c6ad7350db8a08",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "0384255e2834ac80"
            ],
            []
        ]
    },
    {
        "id": "0384255e2834ac80",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "48dc92e594d1f1d7"
            ]
        ]
    },
    {
        "id": "48dc92e594d1f1d7",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "cc74d359f187b3de"
            ]
        ]
    },
    {
        "id": "cc74d359f187b3de",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2658",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 340,
        "wires": []
    },
    {
        "id": "8c8bec77e1f3fd53",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 820,
        "wires": [
            [
                "2b4852423e0e817b"
            ]
        ]
    },
    {
        "id": "2b4852423e0e817b",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "cb28b6a8613e3274",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 730,
        "y": 820,
        "wires": [
            [
                "b14f62fae0fb0af4"
            ],
            []
        ]
    },
    {
        "id": "b14f62fae0fb0af4",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 890,
        "y": 820,
        "wires": [
            [
                "23778f45c81c9489"
            ]
        ]
    },
    {
        "id": "23778f45c81c9489",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 820,
        "wires": [
            [
                "9973ed09b003709e"
            ]
        ]
    },
    {
        "id": "9973ed09b003709e",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2659",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 820,
        "wires": []
    },
    {
        "id": "d1269ddb9347c0d1",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1320,
        "wires": [
            [
                "c57632c085ea2516"
            ]
        ]
    },
    {
        "id": "c57632c085ea2516",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d2ce8173bc21a30b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "458c1e4550ae94c9"
            ],
            []
        ]
    },
    {
        "id": "458c1e4550ae94c9",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 1320,
        "wires": [
            [
                "2faab1801707ebeb"
            ]
        ]
    },
    {
        "id": "2faab1801707ebeb",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1320,
        "wires": [
            [
                "bd477befbf87969d"
            ]
        ]
    },
    {
        "id": "bd477befbf87969d",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2660",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f2302a81bae6aad6",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1800,
        "wires": [
            [
                "6f92a6f46381fc76"
            ]
        ]
    },
    {
        "id": "6f92a6f46381fc76",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4c429685fb621de8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1800,
        "wires": [
            [
                "eea6d4665030d43f"
            ],
            []
        ]
    },
    {
        "id": "eea6d4665030d43f",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 1800,
        "wires": [
            [
                "700e9b5080a0a5f0"
            ]
        ]
    },
    {
        "id": "700e9b5080a0a5f0",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1800,
        "wires": [
            [
                "beff7f4160919b60"
            ]
        ]
    },
    {
        "id": "beff7f4160919b60",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2661",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1800,
        "wires": []
    },
    {
        "id": "1f2bfc0e642ac786",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2300,
        "wires": [
            [
                "84fef8467dad0e9e"
            ]
        ]
    },
    {
        "id": "84fef8467dad0e9e",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "20def9535a2f9dec",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 2300,
        "wires": [
            [
                "a80689a2c0b4b526"
            ],
            []
        ]
    },
    {
        "id": "a80689a2c0b4b526",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 2300,
        "wires": [
            [
                "32f38fc1d0eaed2d"
            ]
        ]
    },
    {
        "id": "32f38fc1d0eaed2d",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2300,
        "wires": [
            [
                "fc71881678799b37"
            ]
        ]
    },
    {
        "id": "fc71881678799b37",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2662",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 2300,
        "wires": []
    },
    {
        "id": "f2390794f03f912b",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2800,
        "wires": [
            [
                "7b451889943eb360"
            ]
        ]
    },
    {
        "id": "7b451889943eb360",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "736a748bbe13a0b4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "7c7a9d39b7060a45"
            ],
            []
        ]
    },
    {
        "id": "7c7a9d39b7060a45",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 890,
        "y": 2800,
        "wires": [
            [
                "4fd8c4bd0744dbde"
            ]
        ]
    },
    {
        "id": "4fd8c4bd0744dbde",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2800,
        "wires": [
            [
                "2f28750417aec92c"
            ]
        ]
    },
    {
        "id": "2f28750417aec92c",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2663",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2800,
        "wires": []
    },
    {
        "id": "d8f975c892993728",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3280,
        "wires": [
            [
                "0741e242a3052fbe"
            ]
        ]
    },
    {
        "id": "0741e242a3052fbe",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "908c6b8311030fa6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 790,
        "y": 3280,
        "wires": [
            [
                "3949c1d8ec535d42"
            ],
            []
        ]
    },
    {
        "id": "3949c1d8ec535d42",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 3280,
        "wires": [
            [
                "d4af74837c86fe8c"
            ]
        ]
    },
    {
        "id": "d4af74837c86fe8c",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 3280,
        "wires": [
            [
                "37c852f9f62f4067"
            ]
        ]
    },
    {
        "id": "37c852f9f62f4067",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2664",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 3280,
        "wires": []
    },
    {
        "id": "6767d70e24d2918e",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B01,B01_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B01,B01_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B01,B01_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B01,B01_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B01,B01_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B01,B01_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 260,
        "y": 560,
        "wires": [
            [
                "380b4b73bb12af20"
            ]
        ]
    },
    {
        "id": "380b4b73bb12af20",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "65a694065e74c35a"
            ]
        ]
    },
    {
        "id": "000b4275c1860188",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "6767d70e24d2918e"
            ]
        ]
    },
    {
        "id": "f1bb1ac548b36c28",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "b48b91cd51c81c61",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 640,
        "wires": [
            [],
            [
                "538ad5b625813f82"
            ]
        ]
    },
    {
        "id": "538ad5b625813f82",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2666",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 640,
        "wires": []
    },
    {
        "id": "afa519249de1363c",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.06\n\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 640,
        "wires": [
            [
                "b9dea4b3ba8a3316"
            ]
        ]
    },
    {
        "id": "d4e7b256212c770e",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 380,
        "y": 640,
        "wires": [
            [
                "afa519249de1363c"
            ]
        ]
    },
    {
        "id": "e3c1f623b6777761",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "64e179f6bf380fac"
            ]
        ]
    },
    {
        "id": "b9dea4b3ba8a3316",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 540",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 640,
        "wires": [
            [
                "f1bb1ac548b36c28"
            ]
        ]
    },
    {
        "id": "64e179f6bf380fac",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B01,B01_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B01,B01_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B01,B01_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "d4e7b256212c770e"
            ]
        ]
    },
    {
        "id": "62435452db8ffd7d",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 01 - SACU 02",
        "info": "",
        "x": 150,
        "y": 500,
        "wires": []
    },
    {
        "id": "65a694065e74c35a",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "33ceb56c4f06454c"
            ]
        ]
    },
    {
        "id": "33ceb56c4f06454c",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "fc668b70d6544f02",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "3b73ee22ba1e84dc"
            ],
            []
        ]
    },
    {
        "id": "3b73ee22ba1e84dc",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 850,
        "y": 560,
        "wires": [
            [
                "2abafa43c5f67d09"
            ]
        ]
    },
    {
        "id": "2abafa43c5f67d09",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "7ac1ba456127e72c"
            ]
        ]
    },
    {
        "id": "7ac1ba456127e72c",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2667",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "3130669c071da71e",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B02,B02_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B02,B02_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B02,B02_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B02,B02_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B02,B02_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B02,B02_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "ee50b03d385525f2"
            ]
        ]
    },
    {
        "id": "ee50b03d385525f2",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "8bfa3e758d8c7eaf"
            ]
        ]
    },
    {
        "id": "e9bf8974b1c7d751",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "3130669c071da71e"
            ]
        ]
    },
    {
        "id": "d9c895d37c836353",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "9f8434df27e2794b",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 1160,
        "wires": [
            [],
            [
                "ee303dce5af08644"
            ]
        ]
    },
    {
        "id": "ee303dce5af08644",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2436",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5e8be658fb2ef9ee",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "f025bf7225ed4d75"
            ]
        ]
    },
    {
        "id": "657da7d5d7e43445",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "5e8be658fb2ef9ee"
            ]
        ]
    },
    {
        "id": "da339fe35966901d",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 120,
        "y": 1160,
        "wires": [
            [
                "2e97bb9d4a3b00b5"
            ]
        ]
    },
    {
        "id": "f025bf7225ed4d75",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 238",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1160,
        "wires": [
            [
                "d9c895d37c836353"
            ]
        ]
    },
    {
        "id": "2e97bb9d4a3b00b5",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B02,B02_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B02,B02_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B02,B02_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 250,
        "y": 1160,
        "wires": [
            [
                "657da7d5d7e43445"
            ]
        ]
    },
    {
        "id": "b17f765b94f3051c",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 02 - SACU 01",
        "info": "",
        "x": 170,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8bfa3e758d8c7eaf",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1060,
        "wires": [
            [
                "4c17b237cde18ebb"
            ]
        ]
    },
    {
        "id": "4c17b237cde18ebb",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "bb1ab0ed45dbe6c2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "450f60c494554609"
            ],
            []
        ]
    },
    {
        "id": "450f60c494554609",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 1060,
        "wires": [
            [
                "867bbf1d1af4a347"
            ]
        ]
    },
    {
        "id": "867bbf1d1af4a347",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1060,
        "wires": [
            [
                "1998270e479ddf9a"
            ]
        ]
    },
    {
        "id": "1998270e479ddf9a",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2668",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6605970860ab67be",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 02 - SACU 02",
        "info": "",
        "x": 150,
        "y": 1260,
        "wires": []
    },
    {
        "id": "84dfa75467a770ac",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B02,B02_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B02,B02_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B02,B02_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B02,B02_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B02,B02_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B02,B02_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 1540,
        "wires": [
            [
                "b2f015124826c4b8"
            ]
        ]
    },
    {
        "id": "b2f015124826c4b8",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 1540,
        "wires": [
            [
                "2776e795e569b0d8"
            ]
        ]
    },
    {
        "id": "cc695442cea7f9a5",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 1540,
        "wires": [
            [
                "84dfa75467a770ac"
            ]
        ]
    },
    {
        "id": "084f8c0d8c6c4056",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "1761bc700846057e",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 880,
        "y": 1620,
        "wires": [
            [],
            [
                "6ca48075634b3a46"
            ]
        ]
    },
    {
        "id": "6ca48075634b3a46",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2452",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3010f8e4d29a62b1",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.04\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1620,
        "wires": [
            [
                "99eb115eae687ed8"
            ]
        ]
    },
    {
        "id": "cab41ddac2900df8",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 1620,
        "wires": [
            [
                "3010f8e4d29a62b1"
            ]
        ]
    },
    {
        "id": "35cf0f57f7d64cac",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "a0a9ceebf1d4f3bd"
            ]
        ]
    },
    {
        "id": "99eb115eae687ed8",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 240",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1620,
        "wires": [
            [
                "084f8c0d8c6c4056"
            ]
        ]
    },
    {
        "id": "a0a9ceebf1d4f3bd",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B02,B02_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B02,B02_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B02,B02_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 260,
        "y": 1620,
        "wires": [
            [
                "cab41ddac2900df8"
            ]
        ]
    },
    {
        "id": "3dc387fcaef27d2e",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 02 - SACU 03",
        "info": "",
        "x": 150,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2776e795e569b0d8",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1540,
        "wires": [
            [
                "d82e1e114349cad4"
            ]
        ]
    },
    {
        "id": "d82e1e114349cad4",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "884e8d37177f8a0a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1540,
        "wires": [
            [
                "448fbcc00e5442d3"
            ],
            []
        ]
    },
    {
        "id": "448fbcc00e5442d3",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 1540,
        "wires": [
            [
                "ee5a5be0a0fe238f"
            ]
        ]
    },
    {
        "id": "ee5a5be0a0fe238f",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1540,
        "wires": [
            [
                "85ceb164b485ce12"
            ]
        ]
    },
    {
        "id": "85ceb164b485ce12",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2669",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "a7e12a4b31a9c6a0",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B03,B03_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B03,B03_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B03,B03_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B03,B03_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B03,B03_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B03,B03_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 2040,
        "wires": [
            [
                "99a6ead144b994f1"
            ]
        ]
    },
    {
        "id": "99a6ead144b994f1",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 2040,
        "wires": [
            [
                "14091a4c949fb596"
            ]
        ]
    },
    {
        "id": "44477c665f2cb448",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2040,
        "wires": [
            [
                "a7e12a4b31a9c6a0"
            ]
        ]
    },
    {
        "id": "1e2fee6e03c83069",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "657ec53fe924269d",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 880,
        "y": 2120,
        "wires": [
            [],
            [
                "7b77fcf0930255a2"
            ]
        ]
    },
    {
        "id": "7b77fcf0930255a2",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2468",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 2120,
        "wires": []
    },
    {
        "id": "6932f134e0e6acf0",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.06\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2120,
        "wires": [
            [
                "30f6c8d7ffc9ca42"
            ]
        ]
    },
    {
        "id": "94be2682f02404cf",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 2120,
        "wires": [
            [
                "6932f134e0e6acf0"
            ]
        ]
    },
    {
        "id": "9c3511736fc51386",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2120,
        "wires": [
            [
                "f04952603772d0c7"
            ]
        ]
    },
    {
        "id": "30f6c8d7ffc9ca42",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 242",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2120,
        "wires": [
            [
                "1e2fee6e03c83069"
            ]
        ]
    },
    {
        "id": "f04952603772d0c7",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B03,B03_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B03,B03_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B03,B03_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 260,
        "y": 2120,
        "wires": [
            [
                "94be2682f02404cf"
            ]
        ]
    },
    {
        "id": "3c6bc40a5f28db42",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 03 - SACU 02",
        "info": "",
        "x": 150,
        "y": 1980,
        "wires": []
    },
    {
        "id": "14091a4c949fb596",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2040,
        "wires": [
            [
                "5fc74dc96d6b8aba"
            ]
        ]
    },
    {
        "id": "5fc74dc96d6b8aba",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "557ae0c4ab283ab0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 2040,
        "wires": [
            [
                "f06305a639b5055a"
            ],
            []
        ]
    },
    {
        "id": "f06305a639b5055a",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 2040,
        "wires": [
            [
                "d03272863d4007d3"
            ]
        ]
    },
    {
        "id": "d03272863d4007d3",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2040,
        "wires": [
            [
                "b7760b6dd91b928f"
            ]
        ]
    },
    {
        "id": "b7760b6dd91b928f",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2670",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 2040,
        "wires": []
    },
    {
        "id": "f4f16afe46cf1ad3",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B04,B04_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B04,B04_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B04,B04_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B04,B04_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B04,B04_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B04,B04_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 280,
        "y": 2540,
        "wires": [
            [
                "921fa540e9ddfecf"
            ]
        ]
    },
    {
        "id": "921fa540e9ddfecf",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 2540,
        "wires": [
            [
                "69d89849ea357a63"
            ]
        ]
    },
    {
        "id": "9d9dc130bb23e0ef",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 130,
        "y": 2540,
        "wires": [
            [
                "f4f16afe46cf1ad3"
            ]
        ]
    },
    {
        "id": "1c4b9bdfe749141e",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "ee2e00fd11903084",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 2620,
        "wires": [
            [],
            [
                "756c22a5a3562a87"
            ]
        ]
    },
    {
        "id": "756c22a5a3562a87",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2485",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2620,
        "wires": []
    },
    {
        "id": "c0cd3e3777cfdd14",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2620,
        "wires": [
            [
                "30df54268755fb8f"
            ]
        ]
    },
    {
        "id": "602e988c7fcda116",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 380,
        "y": 2620,
        "wires": [
            [
                "c0cd3e3777cfdd14"
            ]
        ]
    },
    {
        "id": "4e8f9e098527711e",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 120,
        "y": 2620,
        "wires": [
            [
                "1d2b8ea0550aa281"
            ]
        ]
    },
    {
        "id": "30df54268755fb8f",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 244",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2620,
        "wires": [
            [
                "1c4b9bdfe749141e"
            ]
        ]
    },
    {
        "id": "1d2b8ea0550aa281",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B04,B04_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B04,B04_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B04,B04_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 250,
        "y": 2620,
        "wires": [
            [
                "602e988c7fcda116"
            ]
        ]
    },
    {
        "id": "0f61716404470d91",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 04 - SACU 01",
        "info": "",
        "x": 150,
        "y": 2480,
        "wires": []
    },
    {
        "id": "69d89849ea357a63",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2540,
        "wires": [
            [
                "aaab41b1b4c5e3a8"
            ]
        ]
    },
    {
        "id": "aaab41b1b4c5e3a8",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "116fc13a5f58b5de",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 2540,
        "wires": [
            [
                "1ba5df83dce67b81"
            ],
            []
        ]
    },
    {
        "id": "1ba5df83dce67b81",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 2540,
        "wires": [
            [
                "a381186388927062"
            ]
        ]
    },
    {
        "id": "a381186388927062",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2540,
        "wires": [
            [
                "1d0e409ed41c6a41"
            ]
        ]
    },
    {
        "id": "1d0e409ed41c6a41",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2671",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 2540,
        "wires": []
    },
    {
        "id": "741956e21bef0fe1",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,1000,U32,3,1,2,3000,U32,B05,B05_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,Brightnight,0,new,kW\n2,1002,S32,3,1,2,3002,S32,B05,B05_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,Brightnight,,,KVAr\n3,1004,S32,3,1,2,3004,S32,B05,B05_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,Brightnight,,,\n4,2102,S32,3,1,2,3012,S32,B05,B05_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,Brightnight,,,\n5,2104,S32,3,1,2,3014,S32,B05,B05_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,Brightnight,,,\n6,2100,U32,3,1,2,3010,U32,B05,B05_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,Brightnight,,,\n",
        "output": "str",
        "x": 300,
        "y": 3040,
        "wires": [
            [
                "5655bd303658fcaf"
            ]
        ]
    },
    {
        "id": "5655bd303658fcaf",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 3040,
        "wires": [
            [
                "f4cf88638024042e"
            ]
        ]
    },
    {
        "id": "57e69b14bb10b898",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 150,
        "y": 3040,
        "wires": [
            [
                "741956e21bef0fe1"
            ]
        ]
    },
    {
        "id": "2bb0d5f69fea4937",
        "type": "comment",
        "z": "6fb066b12b6b7f81",
        "name": "ICR 05 - SACU 01",
        "info": "",
        "x": 170,
        "y": 2980,
        "wires": []
    },
    {
        "id": "f4cf88638024042e",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3040,
        "wires": [
            [
                "e262f730fab9210b"
            ]
        ]
    },
    {
        "id": "e262f730fab9210b",
        "type": "Modbus-Read",
        "z": "6fb066b12b6b7f81",
        "name": "INV01_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "63b83dc4daeeda28",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 750,
        "y": 3040,
        "wires": [
            [
                "e85b0fa7767198af"
            ],
            []
        ]
    },
    {
        "id": "e85b0fa7767198af",
        "type": "join",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 3040,
        "wires": [
            [
                "9f64c64fae747437"
            ]
        ]
    },
    {
        "id": "9f64c64fae747437",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value  \n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3040,
        "wires": [
            [
                "b60facafa6669c5e"
            ]
        ]
    },
    {
        "id": "b60facafa6669c5e",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2672",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 3040,
        "wires": []
    },
    {
        "id": "dcec4068979d7275",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3120,
        "wires": [
            [
                "77a7c1ca60b598a8"
            ]
        ]
    },
    {
        "id": "63aea12096a47633",
        "type": "modbus-flex-write",
        "z": "6fb066b12b6b7f81",
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "6c8882a38a893036",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 3120,
        "wires": [
            [],
            [
                "8de2f22408c0854a"
            ]
        ]
    },
    {
        "id": "8de2f22408c0854a",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2501",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 3120,
        "wires": []
    },
    {
        "id": "69c5348695e86599",
        "type": "csv",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 3120,
        "wires": [
            [
                "dcec4068979d7275"
            ]
        ]
    },
    {
        "id": "e5fe0790db567628",
        "type": "inject",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 150,
        "y": 3120,
        "wires": [
            [
                "c714779ebb7e184e"
            ]
        ]
    },
    {
        "id": "77a7c1ca60b598a8",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 246",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 3120,
        "wires": [
            [
                "63aea12096a47633"
            ]
        ]
    },
    {
        "id": "c714779ebb7e184e",
        "type": "template",
        "z": "6fb066b12b6b7f81",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,16,1,2,2102,S32,B05,B05_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kVAr,1\n2,OLD_PF_LIMIT,16,1,2,2104,S32,B05,B05_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,Brightnight,,,,0.001\n3,OLD_PAC_LIMIT,16,1,2,2100,U32,B05,B05_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,Brightnight,,,kW,1\n",
        "output": "str",
        "x": 280,
        "y": 3120,
        "wires": [
            [
                "69c5348695e86599"
            ]
        ]
    },
    {
        "id": "4b3458aeb0144cf0",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag) * 0.1\n\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "779f811481766d5f",
                "ade920ff4d49ddf7"
            ]
        ]
    },
    {
        "id": "779f811481766d5f",
        "type": "function",
        "z": "6fb066b12b6b7f81",
        "name": "function 542",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    if(msg.payload[i].old_tag.includes(\"PAC_LIMIT\"))\n    {\n        var pac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        var old_pac_limit = msg.payload[i].old_value\n        var new_pac_limit = msg.payload[i].new_value\n        global.set(pac_limit_tag, new_pac_limit)\n        var new_pac_limit_Reg_id = msg.payload[i].register\n        var new_pac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_LIMIT\"))\n    {\n        var old_qac_limit = msg.payload[i].old_value\n        var new_qac_limit = msg.payload[i].new_value\n        var qac_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_limit_tag, new_qac_limit)\n        var new_qac_limit_Reg_id = msg.payload[i].register\n        var new_qac_limit_Reg_type = msg.payload[i].reg_type\n    }\n    else if(msg.payload[i].old_tag.includes(\"PF_LIMIT\"))\n    {\n\n        var old_pf_limit = msg.payload[i].old_value\n        var new_pf_limit = msg.payload[i].new_value\n        var new_pf_limit_Reg_id = msg.payload[i].register\n        var new_pf_limit_Reg_type = msg.payload[i].reg_type\n        var pf_limit_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(pf_limit_tag, new_pf_limit)\n\n    }\n    else if(msg.payload[i].old_tag.includes(\"QAC_REF_SEL\"))\n    {\n        var old_qac_ref_sel = msg.payload[i].old_value\n        var new_qac_ref_sel = msg.payload[i].new_value\n        var new_qac_ref_sel_Reg_id = msg.payload[i].register\n        var new_qac_ref_sel_Reg_type = msg.payload[i].reg_type\n        var qac_ref_sel_tag = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].new_tag\n        global.set(qac_ref_sel_tag, new_qac_ref_sel)\n\n    }\n        \n}\n\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined && !Number.isNaN(new_pac_limit)) {\n    var msg1 = {};\n    var buf = Buffer.alloc(4);\n    buf.writeUInt32BE(new_pac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg1.payload = {\n        'value': values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\nif (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0 && new_qac_ref_sel != undefined) {\n    var msg4 = {};\n    msg4.payload = {\n        'value': new_qac_ref_sel,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_ref_sel_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_ref_sel_Reg_type\n    };\n    node.send(msg4);\n}\n\n\nif (old_qac_limit != new_qac_limit && new_qac_limit != undefined && !Number.isNaN(new_qac_limit)) {\n     var msg2 = {}\n     var buf = Buffer.alloc(4);\n     buf.writeInt32BE(new_qac_limit);\n     var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n     msg2.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_qac_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_qac_limit_Reg_type\n    };\n    node.send(msg2);\n}\nif (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined && !Number.isNaN(new_pf_limit)) {\n    var buf = Buffer.alloc(4);\n    buf.writeInt32BE(new_qac_limit);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    var msg3 = {};\n    msg3.payload = {\n        \"value\": values,\n        'fc': 16,\n        'unitid': 1,\n        'address': new_pf_limit_Reg_id,\n        'quantity': 2,\n        'datatype': new_pf_limit_Reg_type\n    };\n    node.send(msg3);\n    //node.warn(\"check\")\n   }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: new_qac_limit, pf: new_pf_limit }\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "7a1991cb0ba2455a",
                "ac1936335c3e278b"
            ]
        ]
    },
    {
        "id": "7a1991cb0ba2455a",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2678",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 460,
        "wires": []
    },
    {
        "id": "ade920ff4d49ddf7",
        "type": "debug",
        "z": "6fb066b12b6b7f81",
        "name": "debug 2679",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "39a9c9edcfcf0b10",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "PAC SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.SACU01.PAC+B01.SACU02.PAC+B01.SACU03.PAC+B02.SACU01.PAC+B02.SACU02.PAC+B02.SACU03.PAC+B03.SACU01.PAC+B03.SACU02.PAC+B03.SACU03.PAC+B04.SACU01.PAC+B04.SACU02.PAC+B05.SACU01.PAC+B05.SACU02.PAC,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "dce21ee90518076c",
                "3698ca382de3f067"
            ]
        ]
    },
    {
        "id": "b299510b2c114ee1",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n2,B01.SACU01.QAC+B01.SACU02.QAC+B01.SACU03.QAC+B02.SACU01.QAC+B02.SACU02.QAC+B02.SACU03.QAC+B03.SACU01.QAC+B03.SACU02.QAC+B03.SACU03.QAC+B04.SACU01.QAC+B04.SACU02.QAC+B05.SACU01.QAC+B05.SACU02.QAC,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,,MVAr,1",
        "output": "str",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "003259f7178733cc"
            ]
        ]
    },
    {
        "id": "d7e0c86b4e0357f4",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "PF SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n3,B01.SACU01.PF+B01.SACU02.PF+B01.SACU03.PF+B02.SACU01.PF+B02.SACU02.PF+B02.SACU03.PF+B03.SACU01.PF+B03.SACU02.PF+B03.SACU03.PF+B04.SACU01.PF+B04.SACU02.PF+B05.SACU01.PF+B05.SACU02.PF,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,PF,PF,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 440,
        "wires": [
            [
                "bdce56b98c37e63b"
            ]
        ]
    },
    {
        "id": "accba2867c556739",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "OLD PAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n4,B01.SACU01.OLD_PAC_LIMIT+B01.SACU02.OLD_PAC_LIMIT+B01.SACU03.OLD_PAC_LIMIT+B02.SACU01.OLD_PAC_LIMIT+B02.SACU02.OLD_PAC_LIMIT+B02.SACU03.OLD_PAC_LIMIT+B03.SACU01.OLD_PAC_LIMIT+B03.SACU02.OLD_PAC_LIMIT+B03.SACU03.OLD_PAC_LIMIT+B04.SACU01.OLD_PAC_LIMIT+B04.SACU02.OLD_PAC_LIMIT+B05.SACU01.OLD_PAC_LIMIT+B05.SACU02.OLD_PAC_LIMIT,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 380,
        "y": 480,
        "wires": [
            [
                "5edd81b6b9665924"
            ]
        ]
    },
    {
        "id": "435faca0a135d78d",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "OLD QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n5,B01.SACU01.OLD_QAC_LIMIT+B01.SACU02.OLD_QAC_LIMIT+B01.SACU03.OLD_QAC_LIMIT+B02.SACU01.OLD_QAC_LIMIT+B02.SACU02.OLD_QAC_LIMIT+B02.SACU03.OLD_QAC_LIMIT+B03.SACU01.OLD_QAC_LIMIT+B03.SACU02.OLD_QAC_LIMIT+B03.SACU03.OLD_QAC_LIMIT+B04.SACU01.OLD_QAC_LIMIT+B04.SACU02.OLD_QAC_LIMIT+B05.SACU01.OLD_QAC_LIMIT+B05.SACU02.OLD_QAC_LIMIT,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 380,
        "y": 520,
        "wires": [
            [
                "cd7cfc881aa3b46c"
            ]
        ]
    },
    {
        "id": "0d2c6187d14c2248",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "OLD_PF_LIMIT SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n6,B01.SACU01.OLD_PF_LIMIT+B01.SACU02.OLD_PF_LIMIT+B01.SACU03.OLD_PF_LIMIT+B02.SACU01.OLD_PF_LIMIT+B02.SACU02.OLD_PF_LIMIT+B02.SACU03.OLD_PF_LIMIT+B03.SACU01.OLD_PF_LIMIT+B03.SACU02.OLD_PF_LIMIT+B03.SACU03.OLD_PF_LIMIT+B04.SACU01.OLD_PF_LIMIT+B04.SACU02.OLD_PF_LIMIT+B05.SACU01.OLD_PF_LIMIT+B05.SACU02.OLD_PF_LIMIT,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 400,
        "y": 560,
        "wires": [
            [
                "243ada56dfce9967"
            ]
        ]
    },
    {
        "id": "dce21ee90518076c",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "f0a36d4322ac6638"
            ]
        ]
    },
    {
        "id": "003259f7178733cc",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "ce40ff035e28952c"
            ]
        ]
    },
    {
        "id": "bdce56b98c37e63b",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "ed32e0269faf4484"
            ]
        ]
    },
    {
        "id": "5edd81b6b9665924",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "63ad0552e1836f01"
            ]
        ]
    },
    {
        "id": "cd7cfc881aa3b46c",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "caa89d1756fb499d"
            ]
        ]
    },
    {
        "id": "243ada56dfce9967",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 560,
        "wires": [
            [
                "424becba8c606ba4"
            ]
        ]
    },
    {
        "id": "f0a36d4322ac6638",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                \n            }\n            else\n            {\n                val = val + 0;;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else\n            {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;  \n   \n    }\n\n   \n        val = (val * msg.payload[i].mf).toFixed(2);\n        val = parseFloat(val)\n        var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n        global.set(tag_name, val)\n\n         var length = flow.get(\"length\")\n\n         var value = global.get(tag_name)\n\n            obj.payload = {\n                value: value,\n                b: msg.payload[i].b,\n                bd: msg.payload[i].bd,\n                d: msg.payload[i].d,\n                dd: msg.payload[i].dd,\n                dt: msg.payload[i].dt,\n                f: msg.payload[i].f,\n                fd: msg.payload[i].fd,\n                h: msg.payload[i].h,\n                iid: msg.payload[i].iid,\n                m: msg.payload[i].m,\n                p: msg.payload[i].p,\n                qu: msg.payload[i].qu,\n                text: msg.payload[i].text,\n                u: msg.payload[i].u,\n                mf: msg.payload[i].mf,\n                reg_id: msg.payload[i].vr_wr_reg,\n                data_type: msg.payload[i].data_type,\n                qty: msg.payload[i].qty,\n                fc: msg.payload[i].fc,\n                SNo: msg.payload[i].SNo,\n                time: time,        \n            }\n            node.send(obj)\n    }\n\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "3d766266151f78cc",
                "e768a30340c6b8ae"
            ]
        ]
    },
    {
        "id": "ce40ff035e28952c",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;        \n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n    var length = flow.get(\"length\")\n\n     var value = global.get(tag_name)\n   \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "3d766266151f78cc",
                "efa409098a370461"
            ]
        ]
    },
    {
        "id": "ed32e0269faf4484",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 440,
        "wires": [
            [
                "3d766266151f78cc"
            ]
        ]
    },
    {
        "id": "63ad0552e1836f01",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n    \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,\n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 480,
        "wires": [
            [
                "3d766266151f78cc"
            ]
        ]
    },
    {
        "id": "caa89d1756fb499d",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n    var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "3d766266151f78cc"
            ]
        ]
    },
    {
        "id": "424becba8c606ba4",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 560,
        "wires": [
            [
                "3d766266151f78cc"
            ]
        ]
    },
    {
        "id": "d58d6aff94a1979b",
        "type": "mqtt out",
        "z": "456d66e8cb220ab1",
        "name": "",
        "topic": "INC_INV",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f80b0b680ce44845",
        "x": 1175,
        "y": 480,
        "wires": [],
        "l": false
    },
    {
        "id": "3a96a3e9b436f490",
        "type": "comment",
        "z": "456d66e8cb220ab1",
        "name": "Incomer Node-RED to PPC",
        "info": "",
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "3e73f9de31964062",
        "type": "mqtt in",
        "z": "456d66e8cb220ab1",
        "name": "",
        "topic": "INC_INV_Write",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "f80b0b680ce44845",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 800,
        "wires": [
            [
                "d28b3b981f9dc9e3",
                "8ea935125fedddf8"
            ]
        ]
    },
    {
        "id": "d28b3b981f9dc9e3",
        "type": "debug",
        "z": "456d66e8cb220ab1",
        "name": "debug 2317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 860,
        "wires": []
    },
    {
        "id": "8ea935125fedddf8",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "function 234",
        "func": "var obj = {}\nvar field = msg.payload.f\n\nvar no_of_inv = flow.get(\"length\")\n\nif (field.includes(\"PAC_LIMIT\")){\n    var tag_field = msg.payload.f\n    var actual_pac_limit = msg.payload.value    \n    global.set(tag_field, actual_pac_limit)\n        \n}\nelse if (field.includes(\"QAC_LIMIT\")) {\n    var tag_field = msg.payload.f\n    var actual_qac_limit = msg.payload.value   \n    global.set(tag_field, actual_qac_limit)\n    \n}\nelse if (field.includes(\"PF_LIMIT\")) {\n    var tag_field = msg.payload.f\n    var actual_pf_limit = msg.payload.value   \n    global.set(tag_field, actual_pf_limit)\n\n   \n}\nelse if (field.includes(\"QAC_REF_SEL\")) {\n    var tag_field = msg.payload.f\n    var actual_qac_ref_sel = msg.payload.value   \n    global.set(tag_field, actual_qac_ref_sel)\n\n   \n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 800,
        "wires": [
            [
                "78560a0e291449d8"
            ]
        ]
    },
    {
        "id": "3d766266151f78cc",
        "type": "join",
        "z": "456d66e8cb220ab1",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 460,
        "wires": [
            [
                "d58d6aff94a1979b"
            ]
        ]
    },
    {
        "id": "78560a0e291449d8",
        "type": "debug",
        "z": "456d66e8cb220ab1",
        "name": "debug 2328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 800,
        "wires": []
    },
    {
        "id": "bfae7976a978ea32",
        "type": "template",
        "z": "456d66e8cb220ab1",
        "name": "NO_OF_INVERTERS_ONLINE SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n7,NO_OF_INV,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV,NO_OF_INV,Server9084,9084,1,iplon_test,0,,MW,1",
        "output": "str",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "c2f0e56922259621"
            ]
        ]
    },
    {
        "id": "c2f0e56922259621",
        "type": "csv",
        "z": "456d66e8cb220ab1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "9a0876d17a84c9d1"
            ]
        ]
    },
    {
        "id": "fc0125079a4cce12",
        "type": "function",
        "z": "456d66e8cb220ab1",
        "name": "To_MQTT",
        "func": "    var length = flow.get(\"length\")\n    global.set(\"No_of_Inv\", length)\n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value:length,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 640,
        "wires": [
            [
                "3d766266151f78cc"
            ]
        ]
    },
    {
        "id": "9a0876d17a84c9d1",
        "type": "split",
        "z": "456d66e8cb220ab1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 640,
        "wires": [
            [
                "fc0125079a4cce12"
            ]
        ]
    },
    {
        "id": "cd605add8eb3eb69",
        "type": "inject",
        "z": "456d66e8cb220ab1",
        "name": "",
        "props": [],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "39a9c9edcfcf0b10",
                "b299510b2c114ee1",
                "d7e0c86b4e0357f4",
                "accba2867c556739",
                "435faca0a135d78d",
                "0d2c6187d14c2248",
                "bfae7976a978ea32"
            ]
        ]
    },
    {
        "id": "efa409098a370461",
        "type": "debug",
        "z": "456d66e8cb220ab1",
        "name": "debug 2405",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 240,
        "wires": []
    },
    {
        "id": "e768a30340c6b8ae",
        "type": "debug",
        "z": "456d66e8cb220ab1",
        "name": "debug 2404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "3698ca382de3f067",
        "type": "debug",
        "z": "456d66e8cb220ab1",
        "name": "debug 2650",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "e3bbd70448d681e7",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        array.push(obj)\n    }\n}\nif(array.length != 0)\n{\n    msg.payload = array\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 540,
        "wires": [
            [
                "3c0e17001ffad269",
                "0340747ee50420c7"
            ]
        ]
    },
    {
        "id": "12d86963e10eb130",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B01_SACU01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B01,B01_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B01,B01_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B01,B01_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B01,B01_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B01,B01_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B01,B01_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B01,B01_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B01,B01_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "bf48b596f4be913f"
            ]
        ]
    },
    {
        "id": "619baafc018c5a94",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B01_SACU03",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B01,B01_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B01,B01_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B01,B01_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B01,B01_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B01,B01_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B01,B01_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B01,B01_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B01,B01_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1",
        "output": "str",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "6c081c589efc1195"
            ]
        ]
    },
    {
        "id": "774590c52dcce658",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B02_SACU02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B02,B02_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B02,B02_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B02,B02_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B02,B02_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B02,B02_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B02,B02_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B02,B02_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B02,B02_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "2ff08cfdef32a3ac"
            ]
        ]
    },
    {
        "id": "34c71525462ce5f2",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B03_SACU01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B03,B03_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B03,B03_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B03,B03_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B03,B03_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B03,B03_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B03,B03_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B03,B03_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B03,B03_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "2a3acd25090d5384"
            ]
        ]
    },
    {
        "id": "12a7f30dd5c0055d",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B03_SACU03",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B03,B03_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B03,B03_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B03,B03_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B03,B03_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B03,B03_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B03,B03_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B03,B03_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B03,B03_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "28d9c6d4472f6106"
            ]
        ]
    },
    {
        "id": "34ed4d3db10942ed",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B04_SACU01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B04,B04_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B04,B04_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B04,B04_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B04,B04_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B04,B04_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B04,B04_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B04,B04_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B04,B04_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 800,
        "wires": [
            [
                "a9e74b983e926a23"
            ]
        ]
    },
    {
        "id": "ca12c3d29ed4ade2",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B05_SACU01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B05,B05_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B05,B05_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B05,B05_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B05,B05_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B05,B05_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B05,B05_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B05,B05_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B05,B05_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 920,
        "wires": [
            [
                "4d5e3b518e33a2cf"
            ]
        ]
    },
    {
        "id": "2f3bda2561a77c9c",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B01_SACU02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B01,B01_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B01,B01_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B01,B01_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B01,B01_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B01,B01_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B01,B01_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B01,B01_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B01,B01_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1",
        "output": "str",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "679881322e550c40"
            ]
        ]
    },
    {
        "id": "7f894476b0375df5",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B02_SACU01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02_SACU01,SACU01,SACU01,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B02,B02_SACU01,SACU01,SACU01,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B02,B02_SACU01,SACU01,SACU01,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B02,B02_SACU01,SACU01,SACU01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B02,B02_SACU01,SACU01,SACU01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B02,B02_SACU01,SACU01,SACU01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B02,B02_SACU01,SACU01,SACU01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B02,B02_SACU01,SACU01,SACU01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B02,B02_SACU01,SACU01,SACU01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "a830cdf7a33f7fc7"
            ]
        ]
    },
    {
        "id": "de8f805cb9ea2ee3",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B02_SACU03",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02_SACU03,SACU03,SACU03,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B02,B02_SACU03,SACU03,SACU03,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B02,B02_SACU03,SACU03,SACU03,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B02,B02_SACU03,SACU03,SACU03,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B02,B02_SACU03,SACU03,SACU03,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B02,B02_SACU03,SACU03,SACU03,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B02,B02_SACU03,SACU03,SACU03,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B02,B02_SACU03,SACU03,SACU03,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B02,B02_SACU03,SACU03,SACU03,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 460,
        "wires": [
            [
                "2b10f3ae638cf6f2"
            ]
        ]
    },
    {
        "id": "4caca6f692a007a2",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B03_SACU02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B03,B03_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B03,B03_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B03,B03_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B03,B03_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B03,B03_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B03,B03_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B03,B03_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B03,B03_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 660,
        "wires": [
            [
                "1bbf00b3a69bd955"
            ]
        ]
    },
    {
        "id": "520cbbf9f1d023ee",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B04_SACU02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B04,B04_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B04,B04_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B04,B04_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B04,B04_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B04,B04_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B04,B04_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B04,B04_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B04,B04_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 840,
        "wires": [
            [
                "8c88836b77832124"
            ]
        ]
    },
    {
        "id": "c7950ac23cebbb7e",
        "type": "template",
        "z": "59d31c1344b2ca00",
        "name": "B05_SACU02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05_SACU02,SACU02,SACU02,INV,PAC,PAC,Server9084,9084,1,iplon_test,0,new,kW,0.001\n2,B05,B05_SACU02,SACU02,SACU02,INV,QAC,QAC,Server9084,9084,1,iplon_test,0,new,KVAr,0.001\n3,B05,B05_SACU02,SACU02,SACU02,INV,PF,PF,Server9084,9084,1,iplon_test,0,new,,0.001\n4,B05,B05_SACU02,SACU02,SACU02,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n5,B05,B05_SACU02,SACU02,SACU02,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server9084,9084,1,iplon_test,,,,1\n6,B05,B05_SACU02,SACU02,SACU02,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server9084,9084,1,iplon_test,,,,0.1\n7,B05,B05_SACU02,SACU02,SACU02,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n8,B05,B05_SACU02,SACU02,SACU02,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,1\n9,B05,B05_SACU02,SACU02,SACU02,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server9084,9084,1,iplon_test,,,,0.1\n\n",
        "output": "str",
        "x": 360,
        "y": 960,
        "wires": [
            [
                "0b50b9de857a55d3"
            ]
        ]
    },
    {
        "id": "bf48b596f4be913f",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "154dd81748dd68ce"
            ]
        ]
    },
    {
        "id": "154dd81748dd68ce",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "679881322e550c40",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "cd6ecc3d1840cfca"
            ]
        ]
    },
    {
        "id": "cd6ecc3d1840cfca",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "6c081c589efc1195",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 300,
        "wires": [
            [
                "f4892c0b8a51264d"
            ]
        ]
    },
    {
        "id": "f4892c0b8a51264d",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "a830cdf7a33f7fc7",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 380,
        "wires": [
            [
                "6c96bfd8a079789d"
            ]
        ]
    },
    {
        "id": "6c96bfd8a079789d",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 380,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "2ff08cfdef32a3ac",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 420,
        "wires": [
            [
                "19d5c9a5d7292144"
            ]
        ]
    },
    {
        "id": "19d5c9a5d7292144",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 420,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "2b10f3ae638cf6f2",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "baaeb55e06d5e2cc"
            ]
        ]
    },
    {
        "id": "baaeb55e06d5e2cc",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 460,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "2a3acd25090d5384",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "4a95b158481855b4"
            ]
        ]
    },
    {
        "id": "4a95b158481855b4",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "1bbf00b3a69bd955",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "c0e7c0fe178f5652"
            ]
        ]
    },
    {
        "id": "c0e7c0fe178f5652",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 660,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "28d9c6d4472f6106",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "135327592322196f"
            ]
        ]
    },
    {
        "id": "135327592322196f",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 700,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "a9e74b983e926a23",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 800,
        "wires": [
            [
                "53a525e3a918f616"
            ]
        ]
    },
    {
        "id": "53a525e3a918f616",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 800,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "8c88836b77832124",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 840,
        "wires": [
            [
                "63271c18ae11383f"
            ]
        ]
    },
    {
        "id": "63271c18ae11383f",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 840,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "4d5e3b518e33a2cf",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 920,
        "wires": [
            [
                "f37204d137b9249d"
            ]
        ]
    },
    {
        "id": "f37204d137b9249d",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 920,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "0b50b9de857a55d3",
        "type": "csv",
        "z": "59d31c1344b2ca00",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 960,
        "wires": [
            [
                "edff80eab81bc086"
            ]
        ]
    },
    {
        "id": "edff80eab81bc086",
        "type": "function",
        "z": "59d31c1344b2ca00",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            [
                "e3bbd70448d681e7"
            ]
        ]
    },
    {
        "id": "fce34b7bde359825",
        "type": "catch",
        "z": "59d31c1344b2ca00",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1240,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0340747ee50420c7",
        "type": "debug",
        "z": "59d31c1344b2ca00",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 280,
        "wires": []
    },
    {
        "id": "e9773e009de0b162",
        "type": "comment",
        "z": "59d31c1344b2ca00",
        "name": "Incomer Node-RED to InfluxDB",
        "info": "",
        "x": 230,
        "y": 100,
        "wires": []
    },
    {
        "id": "3c0e17001ffad269",
        "type": "influxdb batch",
        "z": "59d31c1344b2ca00",
        "influxdb": "17ac3958eae153d0",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iGoT",
        "x": 1250,
        "y": 540,
        "wires": []
    },
    {
        "id": "ac0424c884730be9",
        "type": "interval",
        "z": "59d31c1344b2ca00",
        "name": "interval",
        "interval": "45",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "milliseconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "12d86963e10eb130",
                "2f3bda2561a77c9c",
                "619baafc018c5a94",
                "7f894476b0375df5",
                "774590c52dcce658",
                "de8f805cb9ea2ee3",
                "34c71525462ce5f2",
                "4caca6f692a007a2",
                "12a7f30dd5c0055d",
                "34ed4d3db10942ed",
                "520cbbf9f1d023ee",
                "ca12c3d29ed4ade2",
                "c7950ac23cebbb7e"
            ]
        ]
    },
    {
        "id": "fdf2f3e456ee3c7f",
        "type": "template",
        "z": "72e948af20dbdb5c",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,15099,U32,3,1,2,3000,U32,B01,B01_INV01,INV01,INV01,INV,PAC,PAC,Server8501,8501,1,Sembcorp,0,new,kW\n2,15101,S32,3,1,2,3002,S32,B01,B01_INV01,INV01,INV01,INV,QAC,QAC,Server8501,8501,1,Sembcorp,,,KVAr\n3,15105,S16,3,1,1,3004,S16,B01,B01_INV01,INV01,INV01,INV,PF,PF,Server8501,8501,1,Sembcorp,,,\n4,15106,U16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,FAC,FAC,Server8501,8501,1,Sembcorp,,,Hz\n5,15093,U16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,UAC12,UAC12,Server8501,8501,1,Sembcorp,,,kV\n6,15094,U16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,UAC23,UAC23,Server8501,8501,1,Sembcorp,,,kV\n7,15095,U16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,UAC31,UAC31,Server8501,8501,1,Sembcorp,,,kV\n8,15096,U16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,IAC1,IAC1,Server8501,8501,1,Sembcorp,,,A\n9,15097,S16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,IAC2,IAC2,Server8501,8501,1,Sembcorp,,,A\n10,15098,S16,3,1,1,,,B01,B01_INV01,INV01,INV01,INV,IAC3,IAC3,Server8501,8501,1,Sembcorp,,,A\n11,15010,U16,3,1,1,3016,U16,B01,B01_INV01,INV01,INV01,INV,OLD_QAC_REF_SEL,OLD_QAC_REF_SEL,Server8501,8501,1,Sembcorp,,,\n12,15011,S16,3,1,1,3012,S16,B01,B01_INV01,INV01,INV01,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8501,8501,1,Sembcorp,,,\n13,15012,S16,3,1,1,3014,S16,B01,B01_INV01,INV01,INV01,INV,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Sembcorp,,,\n14,15013,U16,3,1,1,3010,U16,B01,B01_INV01,INV01,INV01,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8501,8501,1,Sembcorp,,,",
        "output": "str",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "4cb578a7040e0655"
            ]
        ]
    },
    {
        "id": "4cb578a7040e0655",
        "type": "csv",
        "z": "72e948af20dbdb5c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "cd6bab3b0e168949",
                "ab98fe79802a4fa1",
                "5f3d49e7a8735b7c"
            ]
        ]
    },
    {
        "id": "35c73350bf7196be",
        "type": "join",
        "z": "72e948af20dbdb5c",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "14",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "a3303ddbe53f6f3a",
                "37eb6af02dbc0a2d"
            ]
        ]
    },
    {
        "id": "a552deea7ccd2fc4",
        "type": "join",
        "z": "72e948af20dbdb5c",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "14",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 560,
        "wires": [
            [
                "a3303ddbe53f6f3a"
            ]
        ]
    },
    {
        "id": "cd6bab3b0e168949",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "fields",
        "func": "var no_reg = msg.payload.length\nvar obj = {};\n\nfor (var i = 0; i < msg.payload.length; i++){\n    obj.payload = {\n        read_reg_id: msg.payload[i].read_reg_id,\n        read_reg_type: msg.payload[i].read_reg_type,\n        write_reg_id: msg.payload[i].write_reg_id,\n        write_reg_type: msg.payload[i].write_reg_type,\n        b: msg.payload[i].b,\n        bd: msg.payload[i].bd,\n        d: msg.payload[i].d,\n        dd: msg.payload[i].dd,\n        dt: msg.payload[i].dt,\n        f: msg.payload[i].f,\n        fd: msg.payload[i].fd,\n        h: msg.payload[i].h,\n        iid: msg.payload[i].iid,\n        m: msg.payload[i].m,\n        p: msg.payload[i].p,\n        qu: msg.payload[i].qu,\n        text: msg.payload[i].text,\n        u: msg.payload[i].u,\n        mf: msg.payload[i].mf\n    }\n    node.send(obj)\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 560,
        "wires": [
            [
                "fb1938d8f9794ce8"
            ]
        ]
    },
    {
        "id": "fb1938d8f9794ce8",
        "type": "change",
        "z": "72e948af20dbdb5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fields",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 560,
        "wires": [
            [
                "a552deea7ccd2fc4"
            ]
        ]
    },
    {
        "id": "a3303ddbe53f6f3a",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"client\":\n        context.data.client = msg.payload;\n        msg = null;\n        break;\n    case \"fields\":\n        context.data.fields = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.client != null && context.data.fields != null) {\n    var data_combine = {\n        \"client\": context.data.client,\n        \"fields\": context.data.fields\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 560,
        "wires": [
            [
                "3931203a802b4772"
            ]
        ]
    },
    {
        "id": "f387ca5ce5903200",
        "type": "change",
        "z": "72e948af20dbdb5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "client",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 500,
        "wires": [
            [
                "35c73350bf7196be"
            ]
        ]
    },
    {
        "id": "b1cc0c265cf1f841",
        "type": "modbus-flex-getter",
        "z": "72e948af20dbdb5c",
        "name": "Field Read",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "9721e62d3bb84d45",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 500,
        "wires": [
            [],
            [
                "0c1ded3ef3642b67",
                "b047c4a09559842a"
            ]
        ]
    },
    {
        "id": "ab98fe79802a4fa1",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++) {\n    \n    if (msg.payload[i].read_reg_type == \"S32\" || msg.payload[i].read_reg_type == \"U32\"){\n        var query1 = {}\n        query1.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'signed32_conversion': \"1\" };\n        node.send(query1);\n    }\n    \n    else if (msg.payload[i].read_reg_type == \"S16\" || msg.payload[i].read_reg_type == \"U16\") {\n        var query2 = {}\n        query2.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'signed16_conversion': \"1\" };\n        node.send(query2);\n    }    \n\n}\nreturn null;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 500,
        "wires": [
            [
                "b1cc0c265cf1f841"
            ]
        ]
    },
    {
        "id": "84e93740e1e514d8",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    var value = msg.payload[i].value\n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 580,
        "wires": [
            [
                "0534323f30bb73d5"
            ]
        ]
    },
    {
        "id": "78280b51b132065a",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "Data con",
        "func": "let array = []\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.client.length; i++) {\n    for (var j = 0; j < msg.payload.fields.length; j++) {\n        var obj = {}\n        if (msg.payload.client[i].register == msg.payload.fields[j].read_reg_id) {\n            if (msg.payload.client[i].quantity == \"1\") {\n                if (msg.payload.fields[j].read_reg_type == 'S16') {\n                    const buf = Buffer.from(msg.payload.client[i].buf);\n                    const value = buf.readInt16BE();\n                     obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        reg_id: msg.payload.client[i].register,\n                        unitid: msg.payload.client[i].unitid,\n                        qty: msg.payload.client[i].quantity,\n                        fc: msg.payload.client[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n                else if (msg.payload.fields[j].read_reg_type == 'U16') {\n                    const buf = Buffer.from(msg.payload.client[i].buf);\n                    const value = buf.readUInt16BE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        reg_id: msg.payload.client[i].register,\n                        unitid: msg.payload.client[i].unitid,\n                        qty: msg.payload.client[i].quantity,\n                        fc: msg.payload.client[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n            }\n            else if (msg.payload.client[i].quantity == \"2\") {\n                if (msg.payload.fields[j].read_reg_type == 'S32') {\n                    const buf = Buffer.from(msg.payload.client[i].buf);\n                    const value = buf.readInt32BE();\n                     obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        reg_id: msg.payload.client[i].register,\n                        unitid: msg.payload.client[i].unitid,\n                        qty: msg.payload.client[i].quantity,\n                        fc: msg.payload.client[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n                else if (msg.payload.fields[j].read_reg_type == 'U32') {\n                    const buf = Buffer.from(msg.payload.client[i].buf);\n                    const value = buf.readUInt32BE();\n                     obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        reg_id: msg.payload.client[i].register,\n                        unitid: msg.payload.client[i].unitid,\n                        qty: msg.payload.client[i].quantity,\n                        fc: msg.payload.client[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n                else if (msg.payload.fields[j].read_reg_type == 'F32') {\n                    const buf = Buffer.from(msg.payload.client[i].buf);\n                    const value = buf.readFloatBE();\n                     obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        reg_id: msg.payload.client[i].register,\n                        unitid: msg.payload.client[i].unitid,\n                        qty: msg.payload.client[i].quantity,\n                        fc: msg.payload.client[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n            }\n        }        \n    }\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 580,
        "wires": [
            [
                "84e93740e1e514d8"
            ]
        ]
    },
    {
        "id": "0c1ded3ef3642b67",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "msg",
        "func": "if(msg.error == \"Error: Timed out\")\n{\n   var buf = \"NaN\";\n   var register = \"NaN\";\n   var unitid = \"NaN\";\n   var quantity = \"NaN\";\n   var fc = \"NaN\";\n    for(var j = 0; j < 14; j++)\n    {\n       \n        var obj = {}\n        obj.payload =\n         {\n             buf: buf,\n        register: register,\n        unitid: unitid,\n        quantity: quantity,\n        fc: fc\n         }\n         node.send(obj)\n    }\n\n}\nelse\n{\n   \n        buf = msg.payload.buffer;\n        register = msg.modbusRequest.address;\n        unitid = msg.modbusRequest.unitid;\n        quantity = msg.modbusRequest.quantity;\n        fc = msg.modbusRequest.fc;\n\n        msg.payload = {\n        buf: buf,\n        register: register,\n        unitid: unitid,\n        quantity: quantity,\n        fc: fc\n             }\n        return msg;\n        \n}\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "f387ca5ce5903200",
                "1b1c44c84a70149a"
            ]
        ]
    },
    {
        "id": "0534323f30bb73d5",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2633",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 580,
        "wires": []
    },
    {
        "id": "32bc755ecdb8334d",
        "type": "comment",
        "z": "72e948af20dbdb5c",
        "name": "Engine 01- Block 01 - INV 01",
        "info": "",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "033f5b8979ab8d62",
        "type": "inject",
        "z": "72e948af20dbdb5c",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "fdf2f3e456ee3c7f"
            ]
        ]
    },
    {
        "id": "3931203a802b4772",
        "type": "switch",
        "z": "72e948af20dbdb5c",
        "name": "",
        "property": "payload.client[0].buf",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NaN",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "NaN",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "bbb78fb44ac940d1"
            ],
            [
                "78280b51b132065a"
            ]
        ]
    },
    {
        "id": "bbb78fb44ac940d1",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.fields.length; i++) \n{\n    var tag_val = msg.payload.fields[i].b + '.' + msg.payload.fields[i].d + '.' + msg.payload.fields[i].f\n    var value = msg.payload.client[i].buf\n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 540,
        "wires": [
            [
                "0c24720ee0ff4231"
            ]
        ]
    },
    {
        "id": "0c24720ee0ff4231",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2634",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 540,
        "wires": []
    },
    {
        "id": "37eb6af02dbc0a2d",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2635",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 500,
        "wires": []
    },
    {
        "id": "1b1c44c84a70149a",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2636",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 460,
        "wires": []
    },
    {
        "id": "8f89626bedb2dc92",
        "type": "modbus-flex-write",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "VR ModTcp WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "9721e62d3bb84d45",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1000,
        "y": 700,
        "wires": [
            [],
            [
                "eedb3b6952857f9e"
            ]
        ]
    },
    {
        "id": "eedb3b6952857f9e",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "debug 2637",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 700,
        "wires": []
    },
    {
        "id": "67f5a3c8732b589f",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "data process",
        "func": "let array = []\nfor (var i = 0; i < msg.payload.length; i++)\n{\n\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    array.push(obj)\n\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 700,
        "wires": [
            [
                "bec00bb11b87c018"
            ]
        ]
    },
    {
        "id": "9bef280a23ee6f73",
        "type": "csv",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "67f5a3c8732b589f"
            ]
        ]
    },
    {
        "id": "2dead4a84891eb69",
        "type": "inject",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 250,
        "y": 700,
        "wires": [
            [
                "dbed2436493a9fd1"
            ]
        ]
    },
    {
        "id": "bec00bb11b87c018",
        "type": "function",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "function 263",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type\n    };\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = (new_qac_limit < 0) ? (0xFFFF + new_qac_limit + 1) : new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type\n     };\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = (new_pf_limit < 0) ? (0xFFFF + new_pf_limit + 1) : new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type\n     };\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 700,
        "wires": [
            [
                "8f89626bedb2dc92",
                "3554e689898121cd"
            ]
        ]
    },
    {
        "id": "3554e689898121cd",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "debug 2638",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 760,
        "wires": []
    },
    {
        "id": "5f3d49e7a8735b7c",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2639",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 620,
        "wires": []
    },
    {
        "id": "b047c4a09559842a",
        "type": "debug",
        "z": "72e948af20dbdb5c",
        "name": "debug 2640",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "dbed2436493a9fd1",
        "type": "template",
        "z": "72e948af20dbdb5c",
        "d": true,
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,6,1,1,15011,S16,B01,B01_INV01,INV01,INV01,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8501,8501,1,Sembcorp,,,kVAr,1\n2,OLD_PF_LIMIT,6,1,1,15012,S16,B01,B01_INV01,INV01,INV01,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server8501,8501,1,Sembcorp,,,,0.001\n3,OLD_PAC_LIMIT,6,1,1,15013,U16,B01,B01_INV01,INV01,INV01,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8501,8501,1,Sembcorp,,,kW,1\n4,OLD_QAC_REF_SEL,6,1,1,15010,U16,B01,B01_INV01,INV01,INV01,INV,QAC_REF_SEL,QAC_REF_SEL,Server8501,8501,1,Sembcorp,,,,",
        "output": "str",
        "x": 380,
        "y": 700,
        "wires": [
            [
                "9bef280a23ee6f73"
            ]
        ]
    }
]